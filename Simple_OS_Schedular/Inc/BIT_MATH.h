/****************************************************************/
/* 					Author   	 : Mark Ehab                    */
/* 					Date     	 : Sep 17, 2021               	*/
/*           	    Description	 : Bit Math                     */
/* 	      	        Version      : V1.0                         */
/****************************************************************/

/*----------------------------------------------------------------------------------------------------------*/
/*                                                                                                          */
/*						         ____ _____ _______   __  __       _______ _    _                           */
/*						        |  _ \_   _|__   __| |  \/  |   /\|__   __| |  | |                          */
/*						        | |_) || |    | |    | \  / |  /  \  | |  | |__| |                          */
/*						        |  _ < | |    | |    | |\/| | / /\ \ | |  |  __  |                          */
/*						        | |_) || |_   | |    | |  | |/ ____ \| |  | |  | |                          */
/*						        |____/_____|  |_|    |_|  |_/_/    \_\_|  |_|  |_|                          */
/*						                                                                                    */
/*						                                                                                    */
/*----------------------------------------------------------------------------------------------------------*/

#ifndef LIB_BIT_MATH_H_
#define LIB_BIT_MATH_H_

/*-----------------------------------------------------------------------------------*/
/*                                                                                   */
/*              Function-like Macros for set, clear, toggle and get bit		         */
/*                                                                                   */
/*-----------------------------------------------------------------------------------*/
#define SET_BIT(Copy_Reg,Copy_Pin) 			(Copy_Reg |= (1 << Copy_Pin))
#define CLEAR_BIT(Copy_Reg,Copy_Pin) 		(Copy_Reg &= (~(1 << Copy_Pin)))
#define GET_BIT(Copy_Reg,Copy_Pin)	        ((Copy_Reg >> Copy_Pin) & (0x01))
#define TOGGLE_BIT(Copy_Reg,Copy_Pin)		(Copy_Reg ^= (1 << Copy_Pin))

/*-----------------------------------------------------------------------------------------------------------------*/
/*                                                                                   							   */
/*	Define a function-like macro called CONC to help us in concatenation of registers bits from config file 	   */
/*                                                                                  							   */
/*-----------------------------------------------------------------------------------------------------------------*/
#define CONC_8_BITS(b7,b6,b5,b4,b3,b2,b1,b0)        							    CONC_8_BITS_HELP(b7,b6,b5,b4,b3,b2,b1,b0)
#define CONC_8_BITS_HELP(b7,b6,b5,b4,b3,b2,b1,b0)   							    0b##b7##b6##b5##b4##b3##b2##b1##b0
#define CONC_16_BITS(b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0)         CONC2_16_BITS_HELP(b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0)
#define CONC2_16_BITS_HELP(b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0)   0b##b15##b14##b13##b12##b11##b10##b9##b8##b7##b6##b5##b4##b3##b2##b1##b0

#endif /* LIB_BIT_MATH_H_ */
